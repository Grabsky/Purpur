From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20Czopek?=
 <44530932+Grabsky@users.noreply.github.com>
Date: Mon, 2 Dec 2024 18:59:00 +0100
Subject: [PATCH] add VaultStateChangeEvent


diff --git a/src/main/java/org/purpurmc/purpur/event/block/VaultStateChangeEvent.java b/src/main/java/org/purpurmc/purpur/event/block/VaultStateChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..d73a449cb4da3dec441242ae6db54a74a6f09a14
--- /dev/null
+++ b/src/main/java/org/purpurmc/purpur/event/block/VaultStateChangeEvent.java
@@ -0,0 +1,63 @@
+package org.purpurmc.purpur.event.block;
+
+import org.bukkit.block.Block;
+import org.bukkit.block.data.type.Vault;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.block.BlockEvent;
+import org.jspecify.annotations.NullMarked;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@NullMarked
+public class VaultStateChangeEvent extends BlockEvent implements Cancellable {
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    private boolean cancel;
+    private final @NotNull Vault.State previousState;
+    private final @NotNull Vault.State newState;
+
+    @ApiStatus.Internal
+    public VaultStateChangeEvent(final @NotNull Block theBlock, final @NotNull Vault.State previousState, final @NotNull Vault.State newState) {
+        super(theBlock);
+        this.previousState = previousState;
+        this.newState = newState;
+    }
+
+    /**
+     * Returns previous {@link Vault.State} of block involved in this event.
+     *
+     * @return the previous state
+     */
+    public @NotNull Vault.State getPreviousState() {
+        return previousState;
+    }
+
+    /**
+     * Returns the new {@link Vault.State} of block involved in this event.
+     *
+     * @return the new state
+     */
+    public @NotNull Vault.State getNewState() {
+        return newState;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    @Override
+    public void setCancelled(final boolean cancel) {
+        this.cancel = cancel;
+    }
+
+    @Override
+    public @NotNull HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+}
